/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dacss1;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.PdfWriter;


import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.*;
import java.util.Calendar;

/**
 * @author MS
 */
public class Invoice extends javax.swing.JFrame {

    /**
     * Creates new form Invoice
     */
    public Invoice(String id, java.util.Date selectedDate) {
        initComponents();
        this.id = Integer.parseInt(id);
        Invoice_id.setText(String.valueOf(this.id));
        if (selectedDate != null) {
            this.selectedDate = new java.sql.Date(selectedDate.getTime());
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid date.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        Sale_date.setText(String.valueOf(this.selectedDate));
        loadDataToTableInvoice();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Sale_date = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Invoice_id = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Invoice = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Total = new javax.swing.JTextField();
        Export_pdf = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Sale_date.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Ngày bán:");

        Invoice_id.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Mã hóa đơn:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Hóa đơn");

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(null);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        Invoice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Invoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Tên sản phẩm", "Số lượng", "Đơn giá", "Tổng giá"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Invoice.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(Invoice);
        if (Invoice.getColumnModel().getColumnCount() > 0) {
            Invoice.getColumnModel().getColumn(1).setMinWidth(50);
            Invoice.getColumnModel().getColumn(1).setMaxWidth(70);
            Invoice.getColumnModel().getColumn(2).setMinWidth(100);
            Invoice.getColumnModel().getColumn(2).setMaxWidth(150);
            Invoice.getColumnModel().getColumn(3).setMinWidth(100);
            Invoice.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Tổng:");

        Total.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        Total.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Invoice_id, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(Sale_date, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Invoice_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(Sale_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        Sale_date.setEditable(false);
        Invoice_id.setEditable(false);

        Export_pdf.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Export_pdf.setText("Xuất pdf");
        Export_pdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_pdfActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton2.setText("Quay lại");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(72, 72, 72)
                .addComponent(Export_pdf)
                .addGap(91, 91, 91))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(Export_pdf))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateProduct(Connection connection, String name, int quantity, int totalPrice) throws SQLException {
        String updateProductSql = "UPDATE products SET quantity = quantity - ?, total_value = total_value - ?, total_sold = total_sold + ? WHERE name = ?";
        try (PreparedStatement updateStmt = connection.prepareStatement(updateProductSql)) {
            updateStmt.setInt(1, quantity);
            updateStmt.setInt(2, totalPrice);
            updateStmt.setInt(3, quantity);
            updateStmt.setString(4, name);
            updateStmt.executeUpdate();
        }
    }

    private void Export_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_pdfActionPerformed
        // TODO add your handling code here:
        if (Invoice.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu để xuất PDF.", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return; // Không xuất PDF nếu không có dữ liệu
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Chọn nơi lưu file PDF");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("PDF Documents", "pdf"));

        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            // Đảm bảo file có phần mở rộng .pdf
            String filePath = fileToSave.getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".pdf")) {
                filePath += ".pdf";
            }

            try {
                Connection connection = Main.getConnection();
                TableModel model = Invoice.getModel();

                for (int row = 0; row < model.getRowCount(); row++) {
                    String name = (String) model.getValueAt(row, 0); // Giả sử cột product_id ở cột đầu tiên
                    int quantity = (int) model.getValueAt(row, 1); // Giả sử cột quantity ở cột thứ hai
                    int totalPrice = (int) model.getValueAt(row, 3); // Giả sử cột total_price ở cột thứ ba


                    try {
                        updateProduct(connection, name, quantity, totalPrice);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }

                exportPanelToPDF(jPanel1, filePath);
                JOptionPane.showMessageDialog(this, "PDF exported successfully to " + filePath, "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (DocumentException | IOException e) {
                JOptionPane.showMessageDialog(this, "Error exporting PDF: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_Export_pdfActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        ADMIN1 ad = new ADMIN1();
        ad.setTitle("Trang chủ");
        ad.setVisible(true);
        ad.pack();
        ad.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jButton2MouseClicked

    public static BufferedImage createImage(JPanel panel) {
        int width = panel.getWidth();
        int height = panel.getHeight();
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = image.createGraphics();
        panel.printAll(g2d);
        g2d.dispose();
        return image;
    }

    private void exportPanelToPDF(JPanel panel, String filePath) throws DocumentException, IOException {
        // Kiểm tra xem có dữ liệu trong bảng hóa đơn hay không
        if (Invoice.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu để xuất PDF.", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return; // Không xuất PDF nếu không có dữ liệu
        }

        // Tiếp tục xuất PDF nếu có dữ liệu
        BufferedImage image = createImage(panel);

        Document document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(image, "png", baos);
            Image pdfImage = Image.getInstance(baos.toByteArray());
            document.add(pdfImage);
            System.out.println("Đã xuất dữ liệu");
        } finally {
            document.close();
        }
    }


    private void loadDataToTableInvoice() {
        String sql = "SELECT * FROM invoice_details WHERE invoice_id = ?";
        try (Connection connection = Main.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

            // Thiết lập giá trị cho các tham số
            preparedStatement.setInt(1, id);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                DefaultTableModel model = (DefaultTableModel) Invoice.getModel();
                model.setRowCount(0);

                int sum = 0; // Khởi tạo biến sum để tính tổng giá trị

                while (resultSet.next()) {
                    Object[] row = {
                            resultSet.getObject("product_name"),
                            resultSet.getObject("quantity"),
                            resultSet.getObject("unit_price"),
                            resultSet.getObject("total_price")
                    };
                    // Thêm hàng vào bảng
                    model.addRow(row);

                    // Tính tổng giá trị
                    sum += resultSet.getInt("total_price");
                }

                // Hiển thị tổng giá trị
                Total.setText(String.valueOf(sum));

                // Kiểm tra nếu không có dữ liệu trong JTable
                if (model.getRowCount() == 0) {
                    // Ẩn JScrollPane nếu không có dữ liệu
                    jScrollPane1.setVisible(false);
                } else {
                    // Hiển thị JScrollPane nếu có dữ liệu
                    jScrollPane1.setVisible(true);


                    // Tính chiều cao tổng của JTable
                    int rowCount = model.getRowCount();
                    int rowHeight = Invoice.getRowHeight();
                    int tableHeight = rowHeight * rowCount + Invoice.getTableHeader().getHeight();

                    // Đặt kích thước cho JTable
                    Invoice.setPreferredSize(new Dimension(Invoice.getPreferredSize().width, tableHeight));
                    jScrollPane1.setPreferredSize(new Dimension(jScrollPane1.getPreferredSize().width, tableHeight));

                    // Làm mới JScrollPane và JPanel
                    jScrollPane1.revalidate();
                    jScrollPane1.repaint();

                    // Thiết lập kích thước mới cho JPanel
                    int width = jScrollPane1.getPreferredSize().width;
                    int height = tableHeight + 150; // Thêm chiều cao cho phần tổng giá trị và khoảng cách nhỏ

                    // Thiết lập kích thước mới cho JPanel
                    jPanel1.setPreferredSize(new Dimension(width, height));
                    jPanel1.setSize(new Dimension(width, height));

                    jPanel1.revalidate();
                    jPanel1.repaint();
                }
            }
        } catch (SQLException e) {
            // Xử lý lỗi một cách cẩn thận, có thể là thông báo hoặc ghi log
            throw new RuntimeException("Error loading data to table invoice", e);
        }
    }


    /**
     * @param args the command line arguments
     */
    private int id;
    private java.util.Date selectedDate;
    private int sum;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Export_pdf;
    private javax.swing.JTable Invoice;
    private javax.swing.JTextField Invoice_id;
    private javax.swing.JTextField Sale_date;
    private javax.swing.JTextField Total;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
